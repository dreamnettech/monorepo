{
  "dot-notation": [
    "off"
  ],
  "@typescript-eslint/dot-notation": [
    "error",
    {
      "allowKeywords": true,
      "allowPattern": "",
      "allowPrivateClassPropertyAccess": false,
      "allowProtectedClassPropertyAccess": false,
      "allowIndexSignaturePropertyAccess": false
    }
  ],
  "no-dupe-class-members": [
    "off"
  ],
  "@typescript-eslint/no-dupe-class-members": [
    "error"
  ],
  "no-implied-eval": [
    "off"
  ],
  "@typescript-eslint/no-implied-eval": [
    "error"
  ],
  "no-redeclare": [
    "off"
  ],
  "@typescript-eslint/no-redeclare": [
    "error",
    {
      "builtinGlobals": false
    }
  ],
  "no-throw-literal": [
    "off"
  ],
  "@typescript-eslint/no-throw-literal": [
    "error"
  ],
  "no-unused-vars": [
    "off"
  ],
  "@typescript-eslint/no-unused-vars": [
    "error",
    {
      "args": "none",
      "caughtErrors": "none",
      "ignoreRestSiblings": true,
      "vars": "all"
    }
  ],
  "no-unused-expressions": [
    "off"
  ],
  "@typescript-eslint/no-unused-expressions": [
    "error",
    {
      "allowShortCircuit": true,
      "allowTernary": true,
      "allowTaggedTemplates": true,
      "enforceForJSX": false
    }
  ],
  "no-useless-constructor": [
    "off"
  ],
  "@typescript-eslint/no-useless-constructor": [
    "error"
  ],
  "no-use-before-define": [
    "off"
  ],
  "@typescript-eslint/no-use-before-define": [
    "error",
    {
      "functions": false,
      "classes": false,
      "enums": false,
      "variables": false,
      "typedefs": false
    }
  ],
  "@typescript-eslint/array-type": [
    "error",
    {
      "default": "array-simple"
    }
  ],
  "@typescript-eslint/await-thenable": [
    "error"
  ],
  "@typescript-eslint/ban-ts-comment": [
    "error",
    {
      "ts-expect-error": "allow-with-description",
      "ts-ignore": true,
      "ts-nocheck": true,
      "ts-check": false,
      "minimumDescriptionLength": 3
    }
  ],
  "@typescript-eslint/ban-types": [
    "error",
    {
      "extendDefaults": false,
      "types": {
        "String": {
          "message": "Use string instead",
          "fixWith": "string"
        },
        "Boolean": {
          "message": "Use boolean instead",
          "fixWith": "boolean"
        },
        "Number": {
          "message": "Use number instead",
          "fixWith": "number"
        },
        "Symbol": {
          "message": "Use symbol instead",
          "fixWith": "symbol"
        },
        "BigInt": {
          "message": "Use bigint instead",
          "fixWith": "bigint"
        },
        "Function": {
          "message": "The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape."
        },
        "Object": {
          "message": "The `Object` type actually means \"any non-nullish value\", so it is marginally better than `unknown`.\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead."
        },
        "{}": {
          "message": "`{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead."
        }
      }
    }
  ],
  "@typescript-eslint/class-literal-property-style": [
    "error",
    "fields"
  ],
  "@typescript-eslint/consistent-generic-constructors": [
    "error",
    "constructor"
  ],
  "@typescript-eslint/consistent-indexed-object-style": [
    "error",
    "record"
  ],
  "@typescript-eslint/consistent-type-assertions": [
    "error",
    {
      "assertionStyle": "as",
      "objectLiteralTypeAssertions": "never"
    }
  ],
  "@typescript-eslint/consistent-type-definitions": [
    "error",
    "interface"
  ],
  "@typescript-eslint/consistent-type-exports": [
    "error",
    {
      "fixMixedExportsWithInlineTypeSpecifier": true
    }
  ],
  "@typescript-eslint/consistent-type-imports": [
    "error",
    {
      "prefer": "type-imports",
      "disallowTypeAnnotations": true,
      "fixStyle": "inline-type-imports"
    }
  ],
  "@typescript-eslint/explicit-function-return-type": [
    "error",
    {
      "allowExpressions": true,
      "allowHigherOrderFunctions": true,
      "allowTypedFunctionExpressions": true,
      "allowDirectConstAssertionInArrowFunctions": true
    }
  ],
  "@typescript-eslint/method-signature-style": [
    "error"
  ],
  "@typescript-eslint/naming-convention": [
    "error",
    {
      "selector": "variableLike",
      "leadingUnderscore": "allow",
      "trailingUnderscore": "allow",
      "format": [
        "camelCase",
        "PascalCase",
        "UPPER_CASE"
      ]
    }
  ],
  "@typescript-eslint/no-base-to-string": [
    "error"
  ],
  "@typescript-eslint/no-confusing-void-expression": [
    "error",
    {
      "ignoreArrowShorthand": false,
      "ignoreVoidOperator": false
    }
  ],
  "@typescript-eslint/no-dynamic-delete": [
    "error"
  ],
  "@typescript-eslint/no-empty-interface": [
    "error",
    {
      "allowSingleExtends": true
    }
  ],
  "@typescript-eslint/no-extraneous-class": [
    "error",
    {
      "allowWithDecorator": true
    }
  ],
  "@typescript-eslint/no-floating-promises": [
    "error"
  ],
  "@typescript-eslint/no-for-in-array": [
    "error"
  ],
  "@typescript-eslint/no-invalid-void-type": [
    "error"
  ],
  "@typescript-eslint/no-misused-promises": [
    "error"
  ],
  "@typescript-eslint/no-non-null-assertion": [
    "error"
  ],
  "@typescript-eslint/no-this-alias": [
    "error",
    {
      "allowDestructuring": true
    }
  ],
  "@typescript-eslint/no-unnecessary-boolean-literal-compare": [
    "error"
  ],
  "@typescript-eslint/no-unnecessary-type-assertion": [
    "error"
  ],
  "@typescript-eslint/no-unsafe-argument": [
    "error"
  ],
  "@typescript-eslint/non-nullable-type-assertion-style": [
    "error"
  ],
  "@typescript-eslint/prefer-includes": [
    "error"
  ],
  "@typescript-eslint/prefer-nullish-coalescing": [
    "error",
    {
      "ignoreConditionalTests": false,
      "ignoreMixedLogicalExpressions": false
    }
  ],
  "@typescript-eslint/prefer-optional-chain": [
    "error"
  ],
  "@typescript-eslint/prefer-readonly": [
    "error"
  ],
  "@typescript-eslint/prefer-reduce-type-parameter": [
    "error"
  ],
  "@typescript-eslint/prefer-return-this-type": [
    "error"
  ],
  "@typescript-eslint/prefer-ts-expect-error": [
    "error"
  ],
  "@typescript-eslint/promise-function-async": [
    "error"
  ],
  "@typescript-eslint/require-array-sort-compare": [
    "error",
    {
      "ignoreStringArrays": true
    }
  ],
  "@typescript-eslint/restrict-plus-operands": [
    "error",
    {
      "skipCompoundAssignments": false
    }
  ],
  "@typescript-eslint/restrict-template-expressions": [
    "error",
    {
      "allowNumber": true
    }
  ],
  "@typescript-eslint/return-await": [
    "error",
    "always"
  ],
  "@typescript-eslint/strict-boolean-expressions": [
    "error",
    {
      "allowString": false,
      "allowNumber": false,
      "allowNullableObject": false,
      "allowNullableBoolean": false,
      "allowNullableString": false,
      "allowNullableNumber": false,
      "allowAny": false
    }
  ],
  "@typescript-eslint/triple-slash-reference": [
    "error",
    {
      "lib": "never",
      "path": "never",
      "types": "never"
    }
  ],
  "@typescript-eslint/unbound-method": [
    "error",
    {
      "ignoreStatic": false
    }
  ]
}